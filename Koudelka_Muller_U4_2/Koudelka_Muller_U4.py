import math
from queue import *
import matplotlib.pyplot as plt


def dijkstra(G, u, v): # Function for Dijkstra algoritm

    # Supplementary data structure
    n = len(G)

    # List of predecessors
    P = [-1] * (n + 1)

    # List of distances
    D = [math.inf] * (n + 1)

    # Priority gueue
    PQ = PriorityQueue()

    # First note to queue
    D[u] = 0
    PQ.put((D[u], u))

    # Repeat until Q is empty
    while not (PQ.empty()):

        # Get first note
        du, u = PQ.get()

        for v, wuv in G[u].items():

            if D[v] > D[u] + wuv :

                # Update distance
                D[v] = D[u] + wuv

                # Store Predecessor
                P[v] = u

                # Add to gueue
                PQ.put((D[v], v))

    return P

def Reconstruction(G,P,u,v): # Function for path

    path = []
    while v != u and v != -1:
        path.append(v)
        v = P[v]
    path.append(v)
    if v == -1:
        path = 'Path does not exist'

    # Sum of path
    sum = 0
    for i in range(len(path) - 1):
        sum = sum + G[path[i]][path[i + 1]]

    print('Path: ' + str(sum))

    return path

def union(u, v, p, r):
    root_u = find(u, p)             #Find root for u + compress
    root_v = find(v, p)             #Find root for v + compress
    if root_u != root_v:            #u, v in different subtrees
        if r[root_u] > r[root_v]:   #u subtree is longer
            p[root_v] = root_u      #Connect v to u
        elif r[root_v] > r[root_u]: #v subtree is longer
            p[root_u] = root_v      #Connect u to v
        else:                       #u, v have equal lengths
            p[root_u] = root_v      #Connect u to v
            r[root_v] = r[root_v]+1 #Increment rank

def find(u, p):
    while (p[u] != u):              #Find root
        u = p[u]
    root = u
    while u != root:
        up = p[u]                   #Store predecessor
        p[u] = root                 #Change predecessor to root
        u = up                      #Go to parent
    return u


def make_set(u, p, r):
    p[u] = u
    r[u] = 0


def mstk(V, E):
    T=[]                                #Empty tree
    wt = 0                              #Sum of weights of T
    p = [math.inf] * (len(V) + 1)       #List of roots
    r = [math.inf] * (len(E) + 1)       #Rank of the node
    for v in V:                         #Make set
        make_set(v, p, r)               #Initilize p and r
    ES = sorted(E, key=lambda it:it[2]) #Sort edges by w
    for e in ES:                        #Process all edges
        u, v, w = e                     #Take an edge
        if (find(u, p) != find(v, p)):  #roots u, v in different trees?
            union(u, v, p, r)           #Create union
            T.append([u, v, w])         #Add edge to tree
            wt = wt + w                 #Compute weight of T
    return wt, T



# Define Graphs
Coordinates = {1: [-715420.7511605939, -1067995.343942614], 2: [-715824.9299439716, -1067558.7856556347], 3: [-715265.6405038015, -1067294.7216987817], 4: [-716003.1380827138, -1067188.4655816432], 5: [-716406.960305863, -1067284.0205039713], 6: [-715001.3645463891, -1064700.3619017946], 7: [-714000.1615753705, -1063555.2132572853], 8: [-714224.801463136, -1062981.114816175], 9: [-714337.0852906816, -1062449.6021641889], 10: [-714274.8541573564, -1062351.185400042], 11: [-714280.7027190654, -1062142.9630207608], 12: [-713255.8829458429, -1059808.8708078132], 13: [-713220.0504697337, -1058447.2828329073], 14: [-713320.6654369447, -1057597.029854581], 15: [-712984.8868932462, -1057493.5651479918], 16: [-713470.5703295886, -1057709.4210584064], 17: [-714096.5758466227, -1058378.3548498156], 18: [-715068.8291213341, -1057436.4631307747], 19: [-714609.9668787472, -1057424.4803746908], 20: [-714090.6884703792, -1057505.9255276334], 21: [-717254.4558741803, -1067037.2873629672], 22: [-717510.4728493863, -1067272.570570184], 23: [-717822.3819676474, -1067199.7460486384], 24: [-717941.3121553183, -1065611.6863998512], 25: [-717864.6262951405, -1065983.142800973], 26: [-717809.6124166177, -1065429.028396668], 27: [-716307.136914246, -1065671.7076674318], 28: [-716286.4698870236, -1065157.0889604238], 29: [-716142.9524795093, -1064704.7513755758], 30: [-716033.4813568898, -1064652.433139848], 31: [-718748.5548446198, -1065615.9980005112], 32: [-719361.8279385418, -1066005.112960876], 33: [-719738.2166257317, -1066677.509111809], 34: [-719610.7940781146, -1066954.8599298783], 35: [-719250.8236733945, -1067078.6779786055], 36: [-720080.1854013844, -1066519.0764841577], 37: [-720466.9824167726, -1065866.9963350797], 38: [-721023.5581265456, -1065273.429888087], 39: [-720914.3442825719, -1064300.1735872168], 40: [-720877.1647341591, -1063972.4433540578], 41: [-720974.5056989591, -1063666.2075511348], 42: [-721022.1473133921, -1063195.421014312], 43: [-720256.5932004147, -1063724.00821691], 44: [-719814.9821373024, -1063568.2056471398], 45: [-719105.9691675341, -1062880.6993792239], 46: [-718477.0377565542, -1062704.6972170067], 47: [-717583.9929166981, -1062579.7352592505], 48: [-717046.5348144617, -1062367.2620036171], 49: [-715943.9603520782, -1064543.0818000017], 50: [-716337.3228219269, -1061207.7361792107], 51: [-716401.2105147856, -1060910.550868844], 52: [-714819.4678983716, -1059150.1475009918], 53: [-714643.076648277, -1059010.8653183589], 54: [-714144.1305524147, -1058444.6431316917], 55: [-715941.3009761417, -1057343.48016177], 56: [-716420.9874143897, -1057311.552925483], 57: [-716662.1869187056, -1057299.539530288], 58: [-716227.8142135448, -1056710.715079199], 59: [-718296.0532683885, -1057593.8783874775], 60: [-718138.122332768, -1057556.7742189385], 61: [-718092.1959333352, -1057712.1329643347], 62: [-717434.0676229406, -1058142.681898194], 63: [-718227.8994321801, -1057957.8570735638], 64: [-718375.2080761201, -1058483.8374299365], 65: [-717375.8013126495, -1059685.9581942428], 66: [-716960.4959417034, -1059744.093560079], 67: [-716973.538958037, -1059998.7658065232], 68: [-716229.1193859541, -1059374.9770122431], 69: [-715272.1408165072, -1058563.4301623607], 70: [-717086.7567582212, -1060103.118953741], 71: [-717307.7834569814, -1060102.4820081021], 72: [-721109.3082778628, -1061030.2554347983], 73: [-721244.4162192971, -1060988.4792709362], 74: [-721231.393952028, -1061602.1141783893], 75: [-721499.1981857435, -1060262.886657754], 76: [-721641.8539605757, -1059926.069149151], 77: [-721943.5567657932, -1059070.7742350774], 78: [-721371.7342563962, -1060631.4042154816], 79: [-721873.0774045596, -1061020.064709938], 80: [-722064.3632088979, -1058427.8906918347], 81: [-721762.6030285147, -1057632.2969695765], 82: [-721457.9361642103, -1056900.4811668515], 83: [-722537.3845823174, -1057660.1064343571], 84: [-721921.9645144367, -1056818.0194644441], 85: [-720474.9340870791, -1057082.2958377898], 86: [-720183.4843628532, -1057854.8101906753], 87: [-719702.4785708004, -1057266.2527249893], 88: [-719284.131860373, -1057358.4205588365], 89: [-719020.7372707628, -1057426.9468380301], 90: [-722709.4997080215, -1064479.8932171997], 91: [-723388.948255669, -1063833.2737496637], 92: [-724303.2988904491, -1062995.6137060768], 93: [-724581.7137852911, -1062526.4850199965], 94: [-724169.6582548633, -1062237.4595526026], 95: [-723748.749371633, -1061764.9470659012], 96: [-722830.4546484748, -1062345.3024373066], 97: [-722243.7905330275, -1062552.4718123144], 98: [-721765.721774808, -1063413.621485925], 99: [-722082.0600465048, -1061098.1120475382], 100: [-720733.487075313, -1066417.1200537332], 101: [-721277.4810380179, -1066680.337214295], 102: [-721756.8989371523, -1066603.663181793], 103: [-722218.0964783905, -1066503.5601352607], 104: [-722611.1365060811, -1066507.1375571515], 105: [-722592.7668756342, -1065915.9544625184], 106: [-722885.9322961274, -1065670.162368315], 107: [-722960.2633094497, -1065627.2199911245], 108: [-722882.8498658316, -1065300.1244612206], 109: [-717261.2828689141, -1057315.1611698726], 110: [-718357.1852766881, -1057582.037098026]}
Graph = {1: [3, 2], 2: [5, 1, 4], 3: [1, 6], 4: [2, 27], 5: [21, 2], 6: [3, 7, 30], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14, 17], 14: [13, 15, 16], 15: [14], 16: [14, 17, 20], 17: [16, 13, 18, 54], 18: [19, 17, 55], 19: [20, 18], 20: [16, 19], 21: [22, 5], 22: [23, 21], 23: [35, 22, 25], 24: [31, 25, 26], 25: [24, 23], 26: [24, 29], 27: [4, 28], 28: [27, 29], 29: [26, 28, 30], 30: [29, 6, 49], 31: [32, 24], 32: [33, 31], 33: [36, 34, 32], 34: [33, 35], 35: [34, 23], 36: [37, 33, 100], 37: [38, 36], 38: [39, 37, 90], 39: [40, 38], 40: [41, 39, 43], 41: [42, 40, 98], 42: [74, 41], 43: [40, 44], 44: [43, 45], 45: [44, 46], 46: [45, 47], 47: [46, 48], 48: [47, 50], 49: [30, 50], 50: [49, 48, 51], 51: [50, 70, 52], 52: [51, 53], 53: [52, 54], 54: [53, 17, 69], 55: [18, 58, 56], 56: [58, 55, 57], 57: [56, 109], 58: [55, 56], 59: [60, 110, 61], 60: [109, 59], 61: [63, 59, 62], 62: [61, 69], 63: [64, 61], 64: [65, 63], 65: [66, 64], 66: [67, 65], 67: [70, 66, 68], 68: [69, 67], 69: [54, 68, 62], 70: [51, 67, 71], 71: [72, 70], 72: [73, 71], 73: [78, 74, 72], 74: [73, 42], 75: [76, 78], 76: [77, 75], 77: [80, 76], 78: [75, 73, 79], 79: [78, 99], 80: [83, 81, 77], 81: [80, 82], 82: [85, 84, 81], 83: [84, 80], 84: [82, 83], 85: [87, 86, 82], 86: [87, 85], 87: [88, 85, 86], 88: [89, 87], 89: [110, 88], 90: [91, 38, 108], 91: [92, 90], 92: [93, 91], 93: [94, 92], 94: [95, 93, 96], 95: [99, 94], 96: [94, 97], 97: [96, 98], 98: [97, 41], 99: [79, 95], 100: [101, 36], 101: [102, 100], 102: [103, 101], 103: [104, 102], 104: [105, 103], 105: [106, 104], 106: [107, 105], 107: [108, 106], 108: [90, 107], 109: [57, 60], 110: [59, 89]}
Graph2 = {1: {2: 0.713917938339307, 3: 0.861104184138391}, 2: {1: 0.713917938339307, 4: 0.49316218528768, 5: 0.772351948436814}, 3: {1: 0.861104184138391, 6: 1.738523580243299}, 4: {2: 0.49316218528768, 27: 1.031281804335591}, 5: {2: 0.772351948436814, 21: 0.588454088150495}, 6: {3: 1.738523580243299, 30: 0.688819368917229, 7: 1.014072714289135}, 7: {8: 0.410989104619302, 6: 1.014072714289135}, 8: {9: 0.651892041902315, 7: 0.410989104619302}, 9: {8: 0.651892041902315, 10: 0.139729544924855}, 10: {9: 0.139729544924855, 11: 0.249965400539588}, 11: {10: 0.249965400539588, 12: 1.699443310960659}, 12: {11: 1.699443310960659, 13: 0.908039592810958}, 13: {17: 0.586154247118381, 12: 0.908039592810958, 14: 1.027422521771166}, 14: {16: 0.224830366569314, 13: 1.027422521771166, 15: 0.42162914192657}, 15: {14: 0.42162914192657}, 16: {17: 1.099396046695926, 20: 0.783184520402648, 14: 0.224830366569314}, 17: {16: 1.099396046695926, 18: 0.902450107105952, 13: 0.586154247118381, 54: 0.054387851409225}, 18: {17: 0.902450107105952, 19: 0.306012450084599, 55: 0.584941771064548}, 19: {18: 0.306012450084599, 20: 0.630751983589794}, 20: {16: 0.783184520402648, 19: 0.630751983589794}, 21: {5: 0.588454088150495, 22: 0.417253095897713}, 22: {21: 0.417253095897713, 23: 0.384357413027956}, 23: {25: 0.811557636875653, 35: 0.955708738592426, 22: 0.384357413027956}, 24: {25: 0.455147485858412, 26: 0.270223287140571, 31: 0.968705044395134}, 25: {24: 0.455147485858412, 23: 0.811557636875653}, 26: {24: 0.270223287140571, 29: 1.211488074732754}, 27: {28: 0.61804023902019, 4: 1.031281804335591}, 28: {27: 0.61804023902019, 29: 0.569471169747099}, 29: {26: 1.211488074732754, 28: 0.569471169747099, 30: 0.145596769357041}, 30: {49: 0.16958562790904, 29: 0.145596769357041, 6: 0.688819368917229}, 31: {32: 0.484201216258177, 24: 0.968705044395134}, 32: {33: 0.924689374759574, 31: 0.484201216258177}, 33: {32: 0.924689374759574, 34: 0.366265441956827, 36: 0.452263970571757}, 34: {33: 0.366265441956827, 35: 0.456803925234348}, 35: {34: 0.456803925234348, 23: 0.955708738592426}, 36: {33: 0.452263970571757, 100: 0.793451570571572, 37: 0.909802973608172}, 37: {36: 0.909802973608172, 38: 0.542462552810871}, 38: {90: 1.242238027681843, 37: 0.542462552810871, 39: 0.652909893697884}, 39: {40: 0.395798902660266, 38: 0.652909893697884}, 40: {41: 0.385600969662951, 43: 0.802143270272563, 39: 0.395798902660266}, 41: {40: 0.385600969662951, 42: 0.567829154604019, 98: 0.996666715902863}, 42: {41: 0.567829154604019, 74: 1.071325415689109}, 43: {40: 0.802143270272563, 44: 0.561947036122301}, 44: {43: 0.561947036122301, 45: 1.185126378915588}, 45: {44: 1.185126378915588, 46: 0.435395850958816}, 46: {45: 0.435395850958816, 47: 1.082094353883712}, 47: {48: 0.693519126100597, 46: 1.082094353883712}, 48: {50: 0.906147348287873, 47: 0.693519126100597}, 49: {50: 2.238974412321154, 30: 0.16958562790904}, 50: {48: 0.906147348287873, 49: 2.238974412321154, 51: 0.202649940095521}, 51: {50: 0.202649940095521, 52: 1.577752229826432, 70: 0.706138151234675}, 52: {51: 1.577752229826432, 53: 0.269702234497379}, 53: {52: 0.269702234497379, 54: 0.503125683988654}, 54: {17: 0.054387851409225, 53: 0.503125683988654, 69: 0.756165036234556}, 55: {56: 0.576897335352348, 18: 0.584941771064548, 58: 0.833530646285233}, 56: {57: 0.289798192656048, 58: 0.757353077761448, 55: 0.576897335352348}, 57: {56: 0.289798192656048, 109: 0.399533056999473}, 58: {56: 0.757353077761448, 55: 0.833530646285233}, 59: {60: 0.194677208831538, 61: 0.282808096637777, 110: 0.074721934848123}, 60: {59: 0.194677208831538, 109: 0.606345816565894}, 61: {59: 0.282808096637777, 62: 0.94374126255124, 63: 0.336847026906129}, 62: {61: 0.94374126255124, 69: 1.468325821876359}, 63: {64: 0.655462773536283, 61: 0.336847026906129}, 64: {65: 1.042200281636485, 63: 0.655462773536283}, 65: {64: 1.042200281636485, 66: 0.503225507633013}, 66: {65: 0.503225507633013, 67: 0.306007231406158}, 67: {66: 0.306007231406158, 68: 1.165466885502986, 70: 0.184768242515919}, 68: {67: 1.165466885502986, 69: 0.836504970280744}, 69: {68: 0.836504970280744, 62: 1.468325821876359, 54: 0.756165036234556}, 70: {67: 0.184768242515919, 51: 0.706138151234675, 71: 0.265233139824209}, 71: {72: 2.608733579094243, 70: 0.265233139824209}, 72: {73: 0.169703097603173, 71: 2.608733579094243}, 73: {72: 0.169703097603173, 74: 0.736527681685688, 78: 0.454913143391253}, 74: {73: 0.736527681685688, 42: 1.071325415689109}, 75: {76: 0.243854878696756, 78: 0.467926522906129}, 76: {75: 0.243854878696756, 77: 1.088337135593275}, 77: {80: 0.784962778410385, 76: 1.088337135593275}, 78: {73: 0.454913143391253, 75: 0.467926522906129, 79: 0.761221900836036}, 79: {99: 0.267697197256342, 78: 0.761221900836036}, 80: {81: 1.021078425685672, 83: 1.082159098963149, 77: 0.784962778410385}, 81: {80: 1.021078425685672, 82: 0.95124225355337}, 82: {81: 0.95124225355337, 84: 0.565558156811386, 85: 1.19960973146527}, 83: {80: 1.082159098963149, 84: 1.251601912662546}, 84: {82: 0.565558156811386, 83: 1.251601912662546}, 85: {82: 1.19960973146527, 86: 0.990797037096072, 87: 0.952869262704886}, 86: {85: 0.990797037096072, 87: 0.912131408219485}, 87: {88: 0.514055237108836, 85: 0.952869262704886, 86: 0.912131408219485}, 88: {89: 0.181441831237114, 87: 0.514055237108836}, 89: {88: 0.181441831237114, 110: 0.817722509243798}, 90: {91: 0.625305992542586, 108: 0.558899542108626, 38: 1.242238027681843}, 91: {90: 0.625305992542586, 92: 1.488053917706192}, 92: {91: 1.488053917706192, 93: 0.654628957496862}, 93: {92: 0.654628957496862, 94: 0.603977394096846}, 94: {96: 1.612246506427995, 93: 0.603977394096846, 95: 0.759356679579544}, 95: {99: 1.196759002605071, 94: 0.759356679579544}, 96: {97: 0.746602481501596, 94: 1.612246506427995}, 97: {96: 0.746602481501596, 98: 0.65663400864487}, 98: {97: 0.65663400864487, 41: 0.996666715902863}, 99: {95: 1.196759002605071, 79: 0.267697197256342}, 100: {36: 0.793451570571572, 101: 0.402885539341503}, 101: {100: 0.402885539341503, 102: 0.582612579807287}, 102: {101: 0.582612579807287, 103: 0.566323459195884}, 103: {104: 0.262037538713997, 102: 0.566323459195884}, 104: {105: 0.394312281603558, 103: 0.262037538713997}, 105: {104: 0.394312281603558, 106: 0.459083862685296}, 106: {105: 0.459083862685296, 107: 0.10301248522588}, 107: {106: 0.10301248522588, 108: 0.403357695833023}, 108: {90: 0.558899542108626, 107: 0.403357695833023}, 109: {57: 0.399533056999473, 60: 0.606345816565894}, 110: {89: 0.817722509243798, 59: 0.074721934848123}}
Graph3 = {1: {2: 0.610219670398504, 3: 0.766396047109014}, 2: {1: 0.610219670398504, 4: 0.419252304967858, 5: 0.665360631079594}, 3: {1: 0.766396047109014, 6: 2.734147937607537}, 4: {2: 0.419252304967858, 27: 1.757777839986383}, 5: {2: 0.665360631079594, 21: 0.929717224304182}, 6: {3: 2.734147937607537, 30: 1.46883266435399, 7: 1.59081287450464}, 7: {8: 0.65201349662159, 6: 1.59081287450464}, 8: {9: 0.572917054297017, 7: 0.65201349662159}, 9: {8: 0.572917054297017, 10: 0.116452475849851}, 10: {9: 0.116452475849851, 11: 0.216205358793704}, 11: {10: 0.216205358793704, 12: 2.600260566494992}, 12: {11: 2.600260566494992, 13: 1.371008621532745}, 13: {17: 0.88144647588122, 12: 1.371008621532745, 14: 0.857574193881064}, 14: {16: 0.189731286719846, 13: 0.857574193881064, 15: 0.360463121658576}, 15: {14: 0.360463121658576}, 16: {17: 0.952987634244481, 20: 0.652715100924015, 14: 0.189731286719846}, 17: {16: 0.952987634244481, 18: 1.394357367018175, 13: 0.88144647588122, 54: 0.081589481371521}, 18: {17: 1.394357367018175, 19: 0.473333522188308, 55: 0.88434654436613}, 19: {18: 0.473333522188308, 20: 0.530254786302639}, 20: {16: 0.652715100924015, 19: 0.530254786302639}, 21: {5: 0.929717224304182, 22: 0.368622365703462}, 22: {21: 0.368622365703462, 23: 0.341376890630503}, 23: {25: 1.318928111602391, 35: 1.648621360959153, 22: 0.341376890630503}, 24: {25: 0.417857726881579, 26: 0.225208106214541, 31: 1.640278971459325}, 25: {24: 0.417857726881579, 23: 1.318928111602391}, 26: {24: 0.225208106214541, 29: 1.948926580162939}, 27: {28: 0.545647820173808, 4: 1.757777839986383}, 28: {27: 0.545647820173808, 29: 0.476676089593716}, 29: {26: 1.948926580162939, 28: 0.476676089593716, 30: 0.134712648907316}, 30: {49: 0.141335094429298, 29: 0.134712648907316, 6: 1.46883266435399}, 31: {32: 0.742268235675177, 24: 1.640278971459325}, 32: {33: 0.890756487451205, 31: 0.742268235675177}, 33: {32: 0.890756487451205, 34: 0.377076136779771, 36: 0.385870407229302}, 34: {33: 0.377076136779771, 35: 0.474155917620212}, 35: {34: 0.474155917620212, 23: 1.648621360959153}, 36: {33: 0.385870407229302, 100: 0.68271210054236, 37: 1.024907200681592}, 37: {36: 1.024907200681592, 38: 0.824333628047131}, 38: {90: 2.006474708716637, 37: 0.824333628047131, 39: 0.988343418616222}, 39: {40: 0.329864749232803, 38: 0.988343418616222}, 40: {41: 0.323673215636544, 43: 0.765942162723549, 39: 0.329864749232803}, 41: {40: 0.323673215636544, 42: 0.510208530146208, 98: 0.832528167281658}, 42: {41: 0.510208530146208, 74: 1.64208517157232}, 43: {40: 0.765942162723549, 44: 0.472878635329909}, 44: {43: 0.472878635329909, 45: 1.218522031802648}, 45: {44: 1.218522031802648, 46: 0.676197825707562}, 46: {45: 0.676197825707562, 47: 1.136673257513575}, 47: {48: 0.61475943213073, 46: 1.136673257513575}, 48: {50: 1.527218573839141, 47: 0.61475943213073}, 49: {50: 4.112450015512036, 30: 0.141335094429298}, 50: {48: 1.527218573839141, 49: 4.112450015512036, 51: 0.312308540286444}, 51: {50: 0.312308540286444, 52: 3.079409599295702, 70: 1.482968160854181}, 52: {51: 3.079409599295702, 53: 0.224773190497448}, 53: {52: 0.224773190497448, 54: 0.75893608227204}, 54: {17: 0.081589481371521, 53: 0.75893608227204, 69: 1.159801366081783}, 55: {56: 0.480793243786214, 18: 0.88434654436613, 58: 0.796588955952568}, 56: {57: 0.241521355406568, 58: 0.644340583442899, 55: 0.480793243786214}, 57: {56: 0.241521355406568, 109: 0.602837944723269}, 58: {56: 0.644340583442899, 55: 0.796588955952568}, 59: {60: 0.162246459559173, 61: 0.235695867197434, 110: 0.0622742121541}, 60: {59: 0.162246459559173, 109: 0.909605172995068}, 61: {59: 0.235695867197434, 62: 0.801414056956102, 63: 0.307079607733086}, 62: {61: 0.801414056956102, 69: 2.325861682644534}, 63: {64: 0.734360109596036, 61: 0.307079607733086}, 64: {65: 1.965499012917891, 63: 0.734360109596036}, 65: {64: 1.965499012917891, 66: 0.456820619863251}, 66: {65: 0.456820619863251, 67: 0.342556562837735}, 67: {66: 0.342556562837735, 68: 1.093753291818398, 70: 0.153988300996099}, 68: {67: 1.093753291818398, 69: 1.356395391514589}, 69: {68: 1.356395391514589, 62: 2.325861682644534, 54: 1.159801366081783}, 70: {67: 0.153988300996099, 51: 1.482968160854181, 71: 0.259531180574184}, 71: {72: 5.30350433472932, 70: 0.259531180574184}, 72: {73: 0.141432991861241, 71: 5.30350433472932}, 73: {72: 0.141432991861241, 74: 0.613832779183067, 78: 0.379131115534553}, 74: {73: 0.613832779183067, 42: 1.64208517157232}, 75: {76: 0.365817792161469, 78: 0.389976618258241}, 76: {75: 0.365817792161469, 77: 0.907035439240733}, 77: {80: 0.667359388520032, 76: 0.907035439240733}, 78: {73: 0.379131115534553, 75: 0.389976618258241, 79: 0.716590724411989}, 79: {99: 0.293559428995981, 78: 0.716590724411989}, 80: {81: 0.885330028954641, 83: 0.934615866949423, 77: 0.667359388520032}, 81: {80: 0.885330028954641, 82: 0.804530269509478}, 82: {81: 0.804530269509478, 84: 0.471343655736271, 85: 1.006671658649875}, 83: {80: 0.934615866949423, 84: 1.092319161509213}, 84: {82: 0.471343655736271, 83: 1.092319161509213}, 85: {82: 1.006671658649875, 86: 1.040064024853771, 87: 0.794133624625646}, 86: {85: 1.040064024853771, 87: 0.830673338040627}, 87: {88: 0.428420269407999, 85: 0.794133624625646, 86: 0.830673338040627}, 88: {89: 0.272188718963729, 87: 0.428420269407999}, 89: {88: 0.272188718963729, 110: 0.681500397882027}, 90: {91: 0.95853831046591, 108: 0.855040332747571, 38: 2.006474708716637}, 91: {90: 0.95853831046591, 92: 1.336393944262621}, 92: {91: 1.336393944262621, 93: 0.550571558016655}, 93: {92: 0.550571558016655, 94: 0.679227477446789}, 94: {96: 1.36608658054108, 93: 0.679227477446789, 95: 0.636439509009553}, 95: {99: 2.061408665922061, 94: 0.636439509009553}, 96: {97: 0.63871248139415, 94: 1.36608658054108}, 97: {96: 0.63871248139415, 98: 1.152974077370741}, 98: {97: 1.152974077370741, 41: 0.832528167281658}, 99: {95: 2.061408665922061, 79: 0.293559428995981}, 100: {36: 0.68271210054236, 101: 0.626844108862619}, 101: {100: 0.626844108862619, 102: 0.543278472613561}, 102: {101: 0.543278472613561, 103: 0.569533247001148}, 103: {104: 0.788908750141278, 102: 0.569533247001148}, 104: {105: 0.66505106485484, 103: 0.788908750141278}, 105: {104: 0.66505106485484, 106: 0.47429546461278}, 106: {105: 0.47429546461278, 107: 0.089472623051996}, 107: {106: 0.089472623051996, 108: 0.338376244886544}, 108: {90: 0.855040332747571, 107: 0.338376244886544}, 109: {57: 0.602837944723269, 60: 0.909605172995068}, 110: {89: 0.681500397882027, 59: 0.0622742121541}}

V = []
E = []
delka = 0
for i in Graph2:
    V.append(i)
    for j in Graph2[i]:
        plus = [i,j,Graph2[i][j]]
        delka = delka + Graph2[i][j]
        E.append(plus)
print(len(E)/2)
print(delka/2)




#  1 - Stříbrná Skalice
# 82 - Mukařov
# 15 - Kostelec nad Černými lesy

# Best Path / Euklidian distance
P1 = dijkstra(Graph3, 1, 82)
R1 = Reconstruction(Graph3,P1,1,82)
# Best Path / Shortest time
P2 = dijkstra(Graph2, 1, 82)
R2 = Reconstruction(Graph2,P2,1,82)


# plot graph
plt.axis('equal')
X = []
Y = []
for i in Graph:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph3[i]:
        X_l = []
        Y_l = []
        X_l.append(Coordinates[i][0])
        Y_l.append(Coordinates[i][1])
        X_l.append(Coordinates[j][0])
        Y_l.append(Coordinates[j][1])
        plt.plot(X_l,Y_l,'k-')
plt.plot(X,Y, 'ko', markersize = 5)
plt.show()


# plot Euklidian distance
plt.axis('equal')
X = []
Y = []
for i in Graph:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph3[i]:
        X_l = []
        Y_l = []
        X_l.append(Coordinates[i][0])
        Y_l.append(Coordinates[i][1])
        X_l.append(Coordinates[j][0])
        Y_l.append(Coordinates[j][1])
        plt.plot(X_l,Y_l,'k-')
plt.plot(X,Y, 'ko', markersize = 5)
X = []
Y = []
for i in R1:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph3[i]:
        if j in R1:
            X_l = []
            Y_l = []
            X_l.append(Coordinates[i][0])
            Y_l.append(Coordinates[i][1])
            X_l.append(Coordinates[j][0])
            Y_l.append(Coordinates[j][1])
            plt.plot(X_l,Y_l,'r-')
plt.plot(X,Y,'ro', markersize = 3)
plt.show()

# plot shortest path
plt.axis('equal')
X = []
Y = []
for i in Graph:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph2[i]:
        X_l = []
        Y_l = []
        X_l.append(Coordinates[i][0])
        Y_l.append(Coordinates[i][1])
        X_l.append(Coordinates[j][0])
        Y_l.append(Coordinates[j][1])
        plt.plot(X_l,Y_l,'k-')
plt.plot(X,Y, 'ko', markersize = 5)
X = []
Y = []
for i in R2:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph2[i]:
        if j in R2:
            X_l = []
            Y_l = []
            X_l.append(Coordinates[i][0])
            Y_l.append(Coordinates[i][1])
            X_l.append(Coordinates[j][0])
            Y_l.append(Coordinates[j][1])
            plt.plot(X_l,Y_l,'c-')
plt.plot(X,Y,'co', markersize = 3)
plt.show()

# Path for every combination
for i in Graph2:
    for j in Graph2:
        if i != j:

            print('From: ' + str(i) + ' To: ' + str(j))
            P = dijkstra(Graph2, i, j)
            R = Reconstruction(Graph2, P, i, j)
            print(R)

# Minimum skelet
wt, T = mstk(V,E)

print(wt)
print(len(T))

# Plot minimum skelet
plt.axis('equal')
X = []
Y = []
for i in Graph:
    X.append(Coordinates[i][0])
    Y.append(Coordinates[i][1])
    for j in Graph2[i]:
        X_l = []
        Y_l = []
        X_l.append(Coordinates[i][0])
        Y_l.append(Coordinates[i][1])
        X_l.append(Coordinates[j][0])
        Y_l.append(Coordinates[j][1])
        plt.plot(X_l,Y_l,'k-')
plt.plot(X,Y, 'ko', markersize = 5)
X = []
Y = []
for i in T:
    X.append(Coordinates[i[0]][0])
    Y.append(Coordinates[i[0]][1])
    X.append(Coordinates[i[1]][0])
    Y.append(Coordinates[i[1]][1])
    X_l = []
    Y_l = []
    X_l.append(Coordinates[i[0]][0])
    Y_l.append(Coordinates[i[0]][1])
    X_l.append(Coordinates[i[1]][0])
    Y_l.append(Coordinates[i[1]][1])
    plt.plot(X_l, Y_l, 'm-')
plt.plot(X,Y,'mo', markersize = 3)
plt.show()